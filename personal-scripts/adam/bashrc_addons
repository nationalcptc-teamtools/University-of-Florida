# Minimal .bashrc @adamkadaban


# Nice things to have in a shell
export SHELL=/bin/bash
HISTCONTROL=ignorebothw
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s cdspell
shopt -s checkwinsize


# This is so less has colors
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'


# These are aliases that i use to make things faster
alias xclip='xclip -selection c'
alias cmd='chmod +x'
alias down='cd ~/Downloads'
alias dow='cd ~/Downloads'
alias docs='cd ~/Documents'
alias d='cd ~/Desktop'
alias r='cd ~/'
alias o='cd /opt'
alias t='cd /tmp'

# I'm bad at typing (typos)
alias s='ls'
alias sl='ls'
alias l='ls'
alias python4='python3' 
alias cd..='cd ..'

# This will make a directory and then cd into it
mkcd () {
  case "$1" in
    */..|*/../) cd -- "$1";; # that doesn't make any sense unless the directory already exists
    /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
    /*) mkdir -p "$1" && cd "$1";;
    */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
    ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
    *) mkdir -p "./$1" && cd "./$1";;
  esac
}

alias mkdir='mkcd'

# This puts things on the clipboard
clip(){
    /usr/bin/cat "$@" | xclip -selection c
}

# copy image on clipboard to file
img(){
    xclip -selection clipboard -t image/png -o > "$@.png"
    xclip -selection c "$@.png"
}
alias toImg='img'
alias toimg='img'


# I like batcat, so this makes things nice if i forget i'm woring with source and a binary
pcat(){
    if  file --mime "$1" | cut -d : -f 2 | grep "executable" >/dev/null 
    then
        if test -f "$1.c"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.c" "${@:2}"
        elif test -f "$1.cpp"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.cpp" "${@:2}"
        elif test -f "$1.asm"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.asm" "${@:2}"
        elif test -f "$1.java"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.java" "${@:2}"
        elif test -f "$1.cs"
        then 
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.cs" "${@:2}"
        elif test -f "$1.rs"
        then 
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.rs" "${@:2}"
        elif test -f "$1.go"
        then                
            printf "File %s is binary. Source:\n" "$1" >&2
            /usr/bin/cat "$1.go" "${@:2}"
        else
            /usr/bin/cat "$1" "${@:2}"
        fi
    else
        /usr/bin/cat "$1" "${@:2}"
    fi
}


# I like batcat
cat(){
    if  file --mime "$1" | cut -d : -f 2 | grep "executable" >/dev/null 
    then
        if test -f "$1.c"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.c" --paging=never "${@:2}"
        elif test -f "$1.cpp"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.cpp" --paging=never "${@:2}"
        elif test -f "$1.asm"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.asm" --paging=never "${@:2}"
        elif test -f "$1.java"
        then
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.java" --paging=never "${@:2}"
        elif test -f "$1.cs"
        then 
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.cs" --paging=never "${@:2}"
        elif test -f "$1.rs"
        then 
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.rs" --paging=never "${@:2}"
        elif test -f "$1.go"
        then                
            printf "File %s is binary. Source:\n" "$1" >&2
            /bin/batcat "$1.go" --paging=never "${@:2}"
        else
                /bin/batcat "$1" --paging=never -A "${@:2}"
        fi
    else
        /bin/batcat "$1" --paging=never "${@:2}"
    fi
}

# Auto disassemble functions and/or main 

disas(){
    if [ "$#" -eq "1" ]
    then
        gdb -q -ex "file $1" -ex 'disas main' -ex 'quit'
    elif [ "$#" -eq "0" ]
    then
        echo -e "Syntax:\n\tMain: disas <binary name>\n\n\tFunc: disas <binary name> <Func name>"
    else
        gdb -q -ex "file $1" -ex "disas $2" -ex 'quit'
    fi
}

# Get vmmap in an instance of a binary

vmmap(){
    echo -e "iS\nquit\n" | r2 "$1"
    gdb -ex "file $1" -ex 'gef config context.layout ""' -ex 'entry-break' -ex 'vmmap' -ex 'quit'
}

# This uses radare and r2ghidra to get the ghidra pseudocode of something in the terminal
pdg(){
    if [ "$#" -eq "1" ]
    then
        echo -e "aaaa\npdg @ main\n" | r2 "$1" 2>/dev/null
    elif [ "$#" -eq "0" ]
    then
        echo -e "Syntax:\n\tMain: pdg <binary name>\n\n\tFunc: pdg <binary name> <Func name>"
    else
        echo -e "aaaa\npdg @ $2\n" | r2 "$1" 2>/dev/null
    fi
}

# nxc is the loml. bash completion is so nice <3 <3 <3
eval "$(register-python-argcomplete nxc)"
